/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DeepseekGeneratorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_STYLES = [
  { name: "\u81EA\u7136\u6D41\u7545\uFF0C\u6587\u5B66\uFF0C\u6B63\u5F0F", description: "\u6587\u5B66\u6027\u5F3A\uFF0C\u8BED\u6C14\u6B63\u5F0F\uFF0C\u7ED3\u6784\u4E25\u8C28\u3002" },
  { name: "\u79D1\u5E7B\u6545\u4E8B\uFF0C\u60AC\u7591", description: "\u7740\u91CD\u4E8E\u6784\u5EFA\u79D1\u5E7B\u6216\u60AC\u7591\u60C5\u8282\u3002" },
  { name: "\u65E5\u8BB0\u4F53\uFF0C\u53CD\u601D", description: "\u4EE5\u7B2C\u4E00\u4EBA\u79F0\u65E5\u8BB0\u5F62\u5F0F\uFF0C\u8FDB\u884C\u6DF1\u5165\u53CD\u601D\u3002" },
  { name: "\u65B0\u95FB\u62A5\u9053\uFF0C\u5BA2\u89C2", description: "\u6A21\u62DF\u65B0\u95FB\u62A5\u9053\u7684\u5BA2\u89C2\u8BED\u6C14\u548C\u7ED3\u6784\u3002" }
];
var DEFAULT_SETTINGS = {
  apiKey: "",
  apiUrl: "https://api.deepseek.com/v1/chat/completions",
  model: "deepseek-chat",
  maxAttempts: 3,
  outputFilePath: "",
  // 默认路径
  keywordsFilePath: ""
  // 默认路径
};
var DeepseekGeneratorPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "deepseek-generate-article",
      name: "Generate Article from Footnotes (Select Style)",
      checkCallback: (checking) => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile && activeFile.extension === "md") {
          if (!checking) {
            this.showGenerateModal(activeFile);
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "deepseek-extract-keywords-only",
      name: "Extract Footnote Keywords to File",
      checkCallback: (checking) => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile && activeFile.extension === "md") {
          if (!checking) {
            this.handleGenerator(activeFile, "extract");
          }
          return true;
        }
        return false;
      }
    });
    this.addRibbonIcon("edit", "footnotelearn Menu", (evt) => {
      this.showRibbonMenu(evt);
    });
    this.addSettingTab(new DeepseekSettingTab(this.app, this));
  }
  async onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // ====================== P4/P5: 菜单和 Modal 窗口 ======================
  /**
   * P4: 显示 Ribbon Icon 被点击时的下拉菜单
   */
  showRibbonMenu(event) {
    const activeFile = this.app.workspace.getActiveFile();
    const menu = new import_obsidian.Menu();
    const isMarkdown = activeFile && activeFile.extension === "md";
    menu.addItem((item) => {
      item.setTitle("\u751F\u6210 (Select Style)").setIcon("file-edit").onClick(() => {
        if (activeFile) {
          this.showGenerateModal(activeFile);
        }
      }).setDisabled(!isMarkdown);
    });
    menu.addItem((item) => {
      item.setTitle("\u6458\u5F55 (Save to File)").setIcon("copy").onClick(() => {
        if (activeFile) {
          this.handleGenerator(activeFile, "extract");
        }
      }).setDisabled(!isMarkdown);
    });
    menu.addSeparator();
    menu.addItem((item) => {
      item.setTitle("Open Settings").setIcon("settings").onClick(() => {
        this.app.setting.open();
        this.app.setting.openTabById(this.manifest.id);
      });
    });
    menu.showAtMouseEvent(event);
  }
  /**
   * P4/P5: 弹出风格选择 Modal
   */
  showGenerateModal(activeFile) {
    new GenerateStyleModal(this.app, activeFile, (style) => {
      if (style) {
        this.handleGenerator(activeFile, "auto", style.description);
      }
    }).open();
  }
  // ====================== 核心逻辑触发器 (handleGenerator) ======================
  /**
   * 主函数，负责读取、生成和写入
   */
  async handleGenerator(activeFile, mode, styleDescription) {
    let content;
    try {
      content = await this.app.vault.read(activeFile);
    } catch (e) {
      new import_obsidian.Notice(`\u274C \u65E0\u6CD5\u8BFB\u53D6\u6587\u4EF6: ${activeFile.path}`, 5e3);
      return;
    }
    const words = this.extractWordsFromMdContent(content);
    if (words.length === 0) {
      new import_obsidian.Notice("\u26A0\uFE0F \u6587\u4EF6\u4E2D\u672A\u627E\u5230\u4EFB\u4F55\u82F1\u6587\u811A\u6CE8\u5173\u952E\u8BCD\u3002", 3e3);
      return;
    }
    const wordsLine = words.join(", ");
    if (mode === "extract") {
      const wordDefMap = this.extractwordsDefinitions(content);
      if (wordDefMap.size === 0) {
        new import_obsidian.Notice("\u26A0\uFE0F \u6587\u4EF6\u4E2D\u672A\u627E\u5230\u811A\u6CE8\u3002", 3e3);
        return;
      }
      const filePath = this.settings.keywordsFilePath;
      const existingWords = await this.loadExistingWords(filePath);
      const contentToAppend = this.convertDictToBlocks(wordDefMap, existingWords);
      if (contentToAppend) {
        await this.appendOrCreateFile(filePath, contentToAppend, "\u5173\u952E\u8BCD");
      } else {
        new import_obsidian.Notice("\u26A0\uFE0F \u6CA1\u6709\u65B0\u5173\u952E\u8BCD\u9700\u8981\u8FFD\u52A0\u3002", 3e3);
      }
      return;
    }
    const res = await this.generateParagraph(words, styleDescription != null ? styleDescription : DEFAULT_STYLES[0].description);
    if (res.success) {
      const now = new Date().toISOString().slice(0, 16).replace("T", " ");
      const outputContent = `
---
####${now}
Source: [[${activeFile.path}]]

${res.text}
`;
      await this.appendOrCreateFile(this.settings.outputFilePath, outputContent, "\u6587\u7AE0");
    } else {
      new import_obsidian.Notice(`\u274C \u751F\u6210\u5931\u8D25\uFF0C\u8BF7\u67E5\u770B\u63A7\u5236\u53F0\u65E5\u5FD7\u3002`, 5e3);
      console.log(`\u274C Generation failed, final result: ${res.text}`);
    }
  }
  /**
   * P1/P2: 辅助函数，确保文件路径存在并追加内容
   */
  async appendOrCreateFile(filePath, content, type) {
    try {
      const vault = this.app.vault;
      const folderPath = filePath.substring(0, filePath.lastIndexOf("/"));
      if (folderPath && !await vault.adapter.exists(folderPath)) {
        await vault.createFolder(folderPath);
      }
      const file = vault.getAbstractFileByPath(filePath);
      if (file instanceof import_obsidian.TFile) {
        await vault.append(file, content);
        new import_obsidian.Notice(`\u2705 ${type}\u5DF2\u8FFD\u52A0\u5230 ${filePath}`, 4e3);
      } else {
        await vault.create(filePath, content);
        new import_obsidian.Notice(`\u2705 ${type}\u6587\u4EF6\u5DF2\u521B\u5EFA: ${filePath}`, 4e3);
      }
    } catch (e) {
      new import_obsidian.Notice(`\u274C \u65E0\u6CD5\u5199\u5165${type}\u6587\u4EF6: ${filePath}`, 5e3);
      console.error("File write error:", e);
    }
  }
  // ====================== 辅助函数 (核心逻辑) ======================
  // ... (extractWordsFromMdContent, containsAll 方法保持不变) ...
  extractwordsDefinitions(content) {
    const pattern = /\[\^\d+]:\s*([^:\n]+):\s*(.+)/gm;
    const matches = [...content.matchAll(pattern)];
    const wordDefMap = /* @__PURE__ */ new Map();
    for (const match of matches) {
      const word = match[1].trim();
      const definition = match[2].trim();
      if (word && !wordDefMap.has(word)) {
        wordDefMap.set(word, definition);
      }
    }
    return wordDefMap;
  }
  async loadExistingWords(filePath) {
    const existingWords = /* @__PURE__ */ new Set();
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian.TFile) {
      try {
        const content = await this.app.vault.read(file);
        const pattern = /^#\s*([^#\n]+)$/gm;
        let match;
        while ((match = pattern.exec(content)) !== null) {
          existingWords.add(match[1].trim());
        }
      } catch (e) {
        console.error("Error reading existing keywords file:", e);
      }
    }
    return existingWords;
  }
  /**
   * 实现 Python 中的 convert_dict_to_blocks 逻辑。
   * 将提取的 Map 转换为新关键词文件的追加内容，格式为分块。
   */
  convertDictToBlocks(wordDefMap, existingWords) {
    const blocks = [];
    const sortedWords = Array.from(wordDefMap.keys()).sort();
    for (const word of sortedWords) {
      if (existingWords.has(word)) {
        continue;
      }
      const definition = wordDefMap.get(word) || "";
      const block = `# ${word}

${definition}

---
`;
      blocks.push(block);
    }
    if (blocks.length === 0)
      return "";
    return blocks.join("");
  }
  extractWordsFromMdContent(content) {
    const pattern = /\[\^\d+]:\s*([A-Za-z\-']+)(?::|\s|$)/gm;
    const matches = [...content.matchAll(pattern)];
    const words = matches.map((match) => match[1].trim());
    return Array.from(new Set(words));
  }
  containsAll(text, requiredWords) {
    const textLower = text.toLowerCase();
    for (const word of requiredWords) {
      try {
        const escapedWord = word.toLowerCase().replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
        const regex = new RegExp("\\b" + escapedWord + "\\b", "g");
        if (!regex.test(textLower)) {
          return false;
        }
      } catch (e) {
        console.error(`Regex creation failed for word: ${word}`, e);
        return false;
      }
    }
    return true;
  }
  /**
   * 构建发送给 DeepSeek API 的用户提示，使用 style 参数。
   */
  buildPrompt(requiredWords, lengthDescription = "\u7EA6500\u8BCD", style = DEFAULT_STYLES[0].description) {
    const wordsLine = requiredWords.join(", ");
    const prompt = `\u8BF7\u7528\u82F1\u6587\u5199\u4E00\u7BC7${lengthDescription}\u8FDE\u8D2F\u591A\u6BB5\u843D\u7684\u6587\u7AE0\uFF0C\u98CE\u683C\uFF1A${style}\uFF0C\u5177\u6709\u4E00\u5B9A\u6545\u4E8B\u60C5\u8282\u3002
\u8981\u6C42\uFF1A\u6587\u7AE0\u4E2D\u5FC5\u987B\u5305\u542B\u4EE5\u4E0B\u5173\u952E\u8BCD\uFF08\u4EFB\u610F\u8BCD\u5F62\u53D8\u5316\u5747\u53EF\uFF09\uFF1A${wordsLine}\u3002\u5E76\u5728\u7ED3\u679C\u4E2D\u5C06\u76F8\u5E94\u5355\u8BCD\u6216\u8005\u5176\u53D8\u5F62\u52A0\u7C97
\u4E0D\u8981\u4F7F\u7528\u9879\u76EE\u7B26\u53F7\uFF0C\u53EF\u5206\u6BB5\uFF0C\u4FDD\u6301\u81EA\u7136\u8FDE\u8D2F\u7684\u8BED\u6C14\u3002`;
    return prompt;
  }
  /**
   * 核心生成函数，传入 style 参数。
   */
  async generateParagraph(requiredWords, styleDescription, lengthDesc = "\u7EA6400\u8BCD") {
    var _a, _b, _c, _d;
    const { apiKey, apiUrl, model, maxAttempts } = this.settings;
    if (!apiKey) {
      new import_obsidian.Notice("\u274C DeepSeek API Key \u672A\u8BBE\u7F6E\u3002\u8BF7\u68C0\u67E5\u63D2\u4EF6\u8BBE\u7F6E\u3002", 8e3);
      return { success: false, text: "API Key Missing" };
    }
    const headers = {
      "Authorization": `Bearer ${apiKey}`,
      "Content-Type": "application/json"
    };
    const systemPrompt = "\u4F60\u662F\u4E00\u4E2A\u64C5\u957F\u5199\u4F5C\u7684\u82F1\u6587\u6587\u7AE0\u751F\u6210\u52A9\u624B\u3002";
    let userPrompt = this.buildPrompt(requiredWords, lengthDesc, styleDescription);
    let lastText = "";
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      new import_obsidian.Notice(`\u{1F916} Attempt ${attempt}/${maxAttempts} to generate...`);
      const payload = {
        model,
        messages: [
          { "role": "system", "content": systemPrompt },
          { "role": "user", "content": userPrompt }
        ],
        temperature: 0.8,
        max_tokens: 1024
      };
      try {
        const response = await (0, import_obsidian.requestUrl)({ url: apiUrl, method: "POST", body: JSON.stringify(payload), headers, throw: false });
        if (response.status === 401) {
          throw new Error("\u274C Authentication Failed.");
        }
        if (response.status !== 200) {
          throw new Error(`API Error ${response.status}: ${((_a = JSON.parse(response.text).error) == null ? void 0 : _a.message) || response.text}`);
        }
        const data = JSON.parse(response.text);
        const text = ((_d = (_c = (_b = data.choices[0]) == null ? void 0 : _b.message) == null ? void 0 : _c.content) == null ? void 0 : _d.trim()) || "";
        lastText = text;
        if (!text) {
          throw new Error("API returned empty content.");
        }
        if (this.containsAll(text, requiredWords)) {
          return { success: true, text };
        } else {
          const missing = requiredWords.filter((w) => !this.containsAll(text, [w]));
          console.warn(`Attempt ${attempt} missing words: ${missing.join(", ")}`);
          userPrompt = this.buildPrompt(requiredWords, lengthDesc, styleDescription) + `
\u6CE8\u610F\uFF1A\u4E0A\u6B21\u8F93\u51FA\u7F3A\u5C11\u8FD9\u4E9B\u5173\u952E\u8BCD\uFF1A${missing.join(", ")}\uFF0C\u8BF7\u52A1\u5FC5\u5305\u542B\u3002`;
          await new Promise((resolve) => setTimeout(resolve, 1e3));
        }
      } catch (error) {
        new import_obsidian.Notice(`\u274C \u751F\u6210\u8FC7\u7A0B\u4E2D\u53D1\u751F\u9519\u8BEF: ${error.message}`, 1e4);
        return { success: false, text: `Error: ${error.message}` };
      }
    }
    new import_obsidian.Notice("\u274C \u8FBE\u5230\u6700\u5927\u5C1D\u8BD5\u6B21\u6570\uFF0C\u751F\u6210\u5931\u8D25\u3002", 5e3);
    return { success: false, text: lastText || "Maximum attempts reached, no valid content generated." };
  }
};
var GenerateStyleModal = class extends import_obsidian.Modal {
  constructor(app, activeFile, callback) {
    super(app);
    this.activeFile = activeFile;
    this.callback = callback;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: `Select Article Style for: ${this.activeFile.name}` });
    DEFAULT_STYLES.forEach((style) => {
      new import_obsidian.Setting(contentEl).setName(style.name).setDesc(style.description).addButton((button) => button.setButtonText("Select").setCta().onClick(() => {
        this.callback(style);
        this.close();
      }));
    });
    new import_obsidian.Setting(contentEl).addButton((button) => button.setButtonText("Cancel").onClick(() => {
      this.callback(null);
      this.close();
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var DeepseekSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "footnotelearn Settings" });
    new import_obsidian.Setting(containerEl).setName("DeepSeek API Key").setDesc("Enter your DeepSeek API Key (sk-xxxxxxxx...).").addText((text) => text.setPlaceholder("sk-xxxxxxxx...").setValue(this.plugin.settings.apiKey).onChange((0, import_obsidian.debounce)(async (value) => {
      this.plugin.settings.apiKey = value.trim();
      await this.plugin.saveSettings();
    }, 500)));
    new import_obsidian.Setting(containerEl).setName("Generated Articles File Path").setDesc("The path to the file where AI generated articles will be appended (e.g., DeepSeek/Generated_Articles.md).").addText((text) => text.setPlaceholder("DeepSeek/Generated_Articles.md").setValue(this.plugin.settings.outputFilePath).onChange((0, import_obsidian.debounce)(async (value) => {
      this.plugin.settings.outputFilePath = value.trim();
      await this.plugin.saveSettings();
    }, 500)));
    new import_obsidian.Setting(containerEl).setName("Extracted Keywords File Path").setDesc("The path to the file where extracted keywords will be appended (e.g., DeepSeek/Extracted_Keywords.md).").addText((text) => text.setPlaceholder("DeepSeek/Extracted_Keywords.md").setValue(this.plugin.settings.keywordsFilePath).onChange((0, import_obsidian.debounce)(async (value) => {
      this.plugin.settings.keywordsFilePath = value.trim();
      await this.plugin.saveSettings();
    }, 500)));
    new import_obsidian.Setting(containerEl).setName("DeepSeek API URL").setDesc("The URL for the DeepSeek Chat API.").addText((text) => text.setPlaceholder("https://api.deepseek.com/v1/...").setValue(this.plugin.settings.apiUrl).onChange((0, import_obsidian.debounce)(async (value) => {
      this.plugin.settings.apiUrl = value.trim();
      await this.plugin.saveSettings();
    }, 500)));
    new import_obsidian.Setting(containerEl).setName("Maximum Attempts").setDesc("Max number of retries if keywords are missed.").addText((text) => text.setPlaceholder("3").setValue(String(this.plugin.settings.maxAttempts)).onChange((0, import_obsidian.debounce)(async (value) => {
      let num = parseInt(value.trim());
      if (isNaN(num) || num < 1)
        num = 3;
      this.plugin.settings.maxAttempts = num;
      await this.plugin.saveSettings();
    }, 500)));
  }
};
//# sourceMappingURL=data:application/json;base64,
